// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "sosmed/features/post/domain"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: newPost
func (_m *Service) Create(newPost domain.Core) (domain.Cores, error) {
	ret := _m.Called(newPost)

	var r0 domain.Cores
	if rf, ok := ret.Get(0).(func(domain.Core) domain.Cores); ok {
		r0 = rf(newPost)
	} else {
		r0 = ret.Get(0).(domain.Cores)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Core) error); ok {
		r1 = rf(newPost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ID
func (_m *Service) Delete(ID int) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: ID, updatePost
func (_m *Service) Edit(ID int, updatePost domain.Core) (domain.Cores, error) {
	ret := _m.Called(ID, updatePost)

	var r0 domain.Cores
	if rf, ok := ret.Get(0).(func(int, domain.Core) domain.Cores); ok {
		r0 = rf(ID, updatePost)
	} else {
		r0 = ret.Get(0).(domain.Cores)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Core) error); ok {
		r1 = rf(ID, updatePost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowAll provides a mock function with given fields:
func (_m *Service) ShowAll() ([]domain.Cores, []domain.Comes, error) {
	ret := _m.Called()

	var r0 []domain.Cores
	if rf, ok := ret.Get(0).(func() []domain.Cores); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cores)
		}
	}

	var r1 []domain.Comes
	if rf, ok := ret.Get(1).(func() []domain.Comes); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.Comes)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ShowMy provides a mock function with given fields: ID
func (_m *Service) ShowMy(ID int) ([]domain.Cores, []domain.Comes, error) {
	ret := _m.Called(ID)

	var r0 []domain.Cores
	if rf, ok := ret.Get(0).(func(int) []domain.Cores); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cores)
		}
	}

	var r1 []domain.Comes
	if rf, ok := ret.Get(1).(func(int) []domain.Comes); ok {
		r1 = rf(ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.Comes)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(ID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ShowSpesific provides a mock function with given fields: ID
func (_m *Service) ShowSpesific(ID int) ([]domain.Cores, []domain.Comes, error) {
	ret := _m.Called(ID)

	var r0 []domain.Cores
	if rf, ok := ret.Get(0).(func(int) []domain.Cores); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cores)
		}
	}

	var r1 []domain.Comes
	if rf, ok := ret.Get(1).(func(int) []domain.Comes); ok {
		r1 = rf(ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.Comes)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(ID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
